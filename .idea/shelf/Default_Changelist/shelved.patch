Index: src/main/java/com/kovospace/paster/base/configurations/securityConfig/JwtTokenSecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.kovospace.paster.base.configurations.securityConfig;\n\nimport com.kovospace.paster.base.filters.JwtAuthFilter;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.http.HttpMethod;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\n\n@EnableWebSecurity\n@Configuration\n@Order(2)\npublic class JwtTokenSecurityConfig extends BaseSecurityConfig {\n\n  private JwtAuthFilter jwtAuthFilter;\n\n  @Autowired\n  public JwtTokenSecurityConfig(JwtAuthFilter jwtAuthFilter) { this.jwtAuthFilter = jwtAuthFilter; }\n\n  @Override\n  protected void configure(HttpSecurity http) throws Exception {\n    http\n        .csrf().disable()\n        .cors()\n        .and()\n        .exceptionHandling()\n        .and()\n        .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n        .and()\n        .authorizeRequests()\n        .antMatchers(HttpMethod.POST, \"/api/v*/user/**\").permitAll()\n        .antMatchers(HttpMethod.GET, \"/api/v*/user/**\").permitAll()\n        .antMatchers(HttpMethod.GET, \"/websocket\").permitAll()\n        .anyRequest().authenticated()\n        .and()\n        .addFilterBefore(\n            jwtAuthFilter,\n            UsernamePasswordAuthenticationFilter.class\n        );\n        /*addFilterBefore(\n            jwtExceptionCatcherFilter,\n            UsernamePasswordAuthenticationFilter.class)\n        .addFilterAfter(\n            jwtAuthorizationFilter,\n            UsernamePasswordAuthenticationFilter.class);*/\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/kovospace/paster/base/configurations/securityConfig/JwtTokenSecurityConfig.java b/src/main/java/com/kovospace/paster/base/configurations/securityConfig/JwtTokenSecurityConfig.java
--- a/src/main/java/com/kovospace/paster/base/configurations/securityConfig/JwtTokenSecurityConfig.java	(revision 39e7413015175658fffeffd335f30c8152fcdc08)
+++ b/src/main/java/com/kovospace/paster/base/configurations/securityConfig/JwtTokenSecurityConfig.java	(date 1653735015088)
@@ -2,6 +2,7 @@
 
 import com.kovospace.paster.base.filters.JwtAuthFilter;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
 import org.springframework.core.annotation.Order;
 import org.springframework.http.HttpMethod;
@@ -9,42 +10,66 @@
 import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
 import org.springframework.security.config.http.SessionCreationPolicy;
 import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
+import org.springframework.web.cors.CorsConfiguration;
+import org.springframework.web.cors.CorsConfigurationSource;
+import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
 
-@EnableWebSecurity
-@Configuration
-@Order(2)
-public class JwtTokenSecurityConfig extends BaseSecurityConfig {
+import java.util.Arrays;
 
-  private JwtAuthFilter jwtAuthFilter;
+//@EnableWebSecurity
+//@Configuration
+//@Order(3)
+public class JwtTokenSecurityConfig /*extends BaseSecurityConfig*/ {
 
-  @Autowired
-  public JwtTokenSecurityConfig(JwtAuthFilter jwtAuthFilter) { this.jwtAuthFilter = jwtAuthFilter; }
+//  private JwtAuthFilter jwtAuthFilter;
+//
+//  @Autowired
+//  public JwtTokenSecurityConfig(JwtAuthFilter jwtAuthFilter) { this.jwtAuthFilter = jwtAuthFilter; }
+//
+//  @Override
+//  protected void configure(HttpSecurity http) throws Exception {
+//    http
+//        .csrf().disable()
+//        //.cors()
+//        //.and()
+//        .exceptionHandling()
+//        .and()
+//        .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
+//        .and()
+//        .authorizeRequests()
+//        .antMatchers(HttpMethod.POST, "/api/v*/user/**").permitAll()
+//        .antMatchers(HttpMethod.GET, "/api/v*/user/**").permitAll()
+//        .antMatchers(HttpMethod.GET, "/websocket").permitAll()
+//        .anyRequest().authenticated()
+//        .and()
+//        .addFilterBefore(
+//            jwtAuthFilter,
+//            UsernamePasswordAuthenticationFilter.class
+//        );
+//  }
+//
+//  @Bean
+//  public CorsConfigurationSource corsConfigurationSource() {
+//    CorsConfiguration configuration = new CorsConfiguration();
+//    // TODO ulozit allowed origins niekde do configu
+//    configuration.setAllowedOrigins(Arrays.asList(
+//            "http://0.0.0.0:4200",
+//            "http://0.0.0.0:6060",
+//            "http://kovo.space:4200",
+//            "http://kovo.space:6060",
+//            "http://localhost:4200",
+//            "http://localhost:6060",
+//            "http://paster.cloud",
+//            "http://www.paster.cloud",
+//            "https://paster.cloud",
+//            "https://www.paster.cloud"
+//    ));
+//    configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"));
+//    configuration.setAllowedHeaders(Arrays.asList("authorization", "content-type", "x-auth-token"));
+//    configuration.setExposedHeaders(Arrays.asList("x-auth-token"));
+//    UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
+//    source.registerCorsConfiguration("/**", configuration);
+//    return source;
+//  }
 
-  @Override
-  protected void configure(HttpSecurity http) throws Exception {
-    http
-        .csrf().disable()
-        .cors()
-        .and()
-        .exceptionHandling()
-        .and()
-        .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
-        .and()
-        .authorizeRequests()
-        .antMatchers(HttpMethod.POST, "/api/v*/user/**").permitAll()
-        .antMatchers(HttpMethod.GET, "/api/v*/user/**").permitAll()
-        .antMatchers(HttpMethod.GET, "/websocket").permitAll()
-        .anyRequest().authenticated()
-        .and()
-        .addFilterBefore(
-            jwtAuthFilter,
-            UsernamePasswordAuthenticationFilter.class
-        );
-        /*addFilterBefore(
-            jwtExceptionCatcherFilter,
-            UsernamePasswordAuthenticationFilter.class)
-        .addFilterAfter(
-            jwtAuthorizationFilter,
-            UsernamePasswordAuthenticationFilter.class);*/
-  }
 }
Index: src/main/java/com/kovospace/paster/base/configurations/securityConfig/ApiKeySecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.kovospace.paster.base.configurations.securityConfig;\n\nimport com.kovospace.paster.base.exceptions.ApiKeyInvalidException;\nimport com.kovospace.paster.base.exceptions.ApiKeyMissingException;\nimport com.kovospace.paster.base.filters.ApiKeyAuthFilter;\nimport com.kovospace.paster.base.services.ApiKeyService;\nimport com.kovospace.paster.base.services.BaseService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.http.SessionCreationPolicy;\n\n@Configuration\n@EnableWebSecurity\n@Order(1)\npublic class ApiKeySecurityConfig extends BaseSecurityConfig {\n\n    private BaseService baseService;\n    private ApiKeyService apiKeyService;\n\n    @Value(\"${app.api-key-header}\")\n    private String principalRequestHeader;\n\n    @Autowired\n    public ApiKeySecurityConfig(ApiKeyService apiKeyService, BaseService baseService) {\n        this.apiKeyService = apiKeyService;\n        this.baseService = baseService;\n    }\n\n    @Override\n    protected void configure(HttpSecurity httpSecurity) throws Exception {\n        ApiKeyAuthFilter filter = new ApiKeyAuthFilter(principalRequestHeader);\n\n        filter.setAuthenticationManager(authentication -> {\n            String principal = (String) authentication.getPrincipal();\n            if (principal == null || principal.equals(\"\")) {\n                throw new ApiKeyMissingException();\n            }\n            if (!apiKeyService.isValid(principal)) {\n                throw new ApiKeyInvalidException();\n            }\n            authentication.setAuthenticated(true);\n            return authentication;\n        });\n\n        httpSecurity\n                .antMatcher(\"/**\")\n                .csrf().disable()\n                .cors()\n                .and()\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n                .and()\n                .addFilter(filter).authorizeRequests().anyRequest().authenticated();\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/kovospace/paster/base/configurations/securityConfig/ApiKeySecurityConfig.java b/src/main/java/com/kovospace/paster/base/configurations/securityConfig/ApiKeySecurityConfig.java
--- a/src/main/java/com/kovospace/paster/base/configurations/securityConfig/ApiKeySecurityConfig.java	(revision 39e7413015175658fffeffd335f30c8152fcdc08)
+++ b/src/main/java/com/kovospace/paster/base/configurations/securityConfig/ApiKeySecurityConfig.java	(date 1653735015084)
@@ -13,12 +13,12 @@
 import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
 import org.springframework.security.config.http.SessionCreationPolicy;
 
-@Configuration
+/*@Configuration
 @EnableWebSecurity
-@Order(1)
-public class ApiKeySecurityConfig extends BaseSecurityConfig {
+@Order(2)*/
+public class ApiKeySecurityConfig /*extends BaseSecurityConfig*/ {
 
-    private BaseService baseService;
+    /*private BaseService baseService;
     private ApiKeyService apiKeyService;
 
     @Value("${app.api-key-header}")
@@ -49,11 +49,9 @@
         httpSecurity
                 .antMatcher("/**")
                 .csrf().disable()
-                .cors()
-                .and()
                 .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                 .and()
                 .addFilter(filter).authorizeRequests().anyRequest().authenticated();
-    }
+    }*/
 
 }
Index: src/main/java/com/kovospace/paster/base/filters/ApiKeyAuthFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.kovospace.paster.base.filters;\n\nimport org.springframework.security.web.authentication.preauth.AbstractPreAuthenticatedProcessingFilter;\nimport org.springframework.stereotype.Component;\n\nimport javax.servlet.http.HttpServletRequest;\n\npublic class ApiKeyAuthFilter extends AbstractPreAuthenticatedProcessingFilter {\n\n    private String principalRequestHeader;\n\n    public ApiKeyAuthFilter(String principalRequestHeader) {\n        this.principalRequestHeader = principalRequestHeader;\n    }\n\n    @Override\n    protected Object getPreAuthenticatedPrincipal(HttpServletRequest request) {\n        return request.getHeader(principalRequestHeader);\n    }\n\n    @Override\n    protected Object getPreAuthenticatedCredentials(HttpServletRequest request) {\n        return \"N/A\";\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/kovospace/paster/base/filters/ApiKeyAuthFilter.java b/src/main/java/com/kovospace/paster/base/filters/ApiKeyAuthFilter.java
--- a/src/main/java/com/kovospace/paster/base/filters/ApiKeyAuthFilter.java	(revision 39e7413015175658fffeffd335f30c8152fcdc08)
+++ b/src/main/java/com/kovospace/paster/base/filters/ApiKeyAuthFilter.java	(date 1653710907182)
@@ -1,7 +1,6 @@
 package com.kovospace.paster.base.filters;
 
 import org.springframework.security.web.authentication.preauth.AbstractPreAuthenticatedProcessingFilter;
-import org.springframework.stereotype.Component;
 
 import javax.servlet.http.HttpServletRequest;
 
Index: src/main/java/com/kovospace/paster/base/filters/CorsFilter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/kovospace/paster/base/filters/CorsFilter.java b/src/main/java/com/kovospace/paster/base/filters/CorsFilter.java
new file mode 100644
--- /dev/null	(date 1653736385351)
+++ b/src/main/java/com/kovospace/paster/base/filters/CorsFilter.java	(date 1653736385351)
@@ -0,0 +1,44 @@
+package com.kovospace.paster.base.filters;
+
+import org.springframework.core.Ordered;
+import org.springframework.core.annotation.Order;
+import org.springframework.http.HttpMethod;
+import org.springframework.stereotype.Component;
+
+import javax.servlet.Filter;
+import javax.servlet.FilterChain;
+import javax.servlet.FilterConfig;
+import javax.servlet.ServletException;
+import javax.servlet.ServletRequest;
+import javax.servlet.ServletResponse;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+
+@Component
+@Order(Ordered.HIGHEST_PRECEDENCE)
+public class CorsFilter implements Filter {
+
+        @Override
+        public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {
+            final HttpServletResponse response = (HttpServletResponse) res;
+            response.setHeader("Access-Control-Allow-Origin", "*");
+            response.setHeader("Access-Control-Allow-Methods", "POST, PUT, GET, OPTIONS, DELETE, PATCH");
+            response.setHeader("Access-Control-Allow-Headers", "Authorization, Content-Type, enctype");
+            response.setHeader("Access-Control-Max-Age", "3600");
+            if (HttpMethod.OPTIONS.name().equalsIgnoreCase(((HttpServletRequest) req).getMethod())) {
+                response.setStatus(HttpServletResponse.SC_OK);
+            } else {
+                chain.doFilter(req, res);
+            }
+        }
+
+        @Override
+        public void destroy() {
+        }
+
+        @Override
+        public void init(FilterConfig config) throws ServletException {
+        }
+
+}
Index: src/main/java/com/kovospace/paster/base/configurations/securityConfig/CorsSecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/kovospace/paster/base/configurations/securityConfig/CorsSecurityConfig.java b/src/main/java/com/kovospace/paster/base/configurations/securityConfig/CorsSecurityConfig.java
new file mode 100644
--- /dev/null	(date 1653736149839)
+++ b/src/main/java/com/kovospace/paster/base/configurations/securityConfig/CorsSecurityConfig.java	(date 1653736149839)
@@ -0,0 +1,94 @@
+package com.kovospace.paster.base.configurations.securityConfig;
+
+import org.springframework.context.annotation.Bean;
+import org.springframework.context.annotation.Configuration;
+import org.springframework.core.Ordered;
+import org.springframework.core.annotation.Order;
+import org.springframework.security.config.annotation.web.builders.HttpSecurity;
+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
+import org.springframework.web.cors.CorsConfiguration;
+import org.springframework.web.cors.CorsConfigurationSource;
+import org.springframework.web.cors.CorsUtils;
+import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
+
+import java.util.Arrays;
+
+//@EnableWebSecurity
+//@Configuration
+//@Order(1)
+//@Order(Ordered.HIGHEST_PRECEDENCE)
+public class CorsSecurityConfig /*extends BaseSecurityConfig*/ {
+
+//        @Override
+//        protected void configure(HttpSecurity http) throws Exception {
+//            http.cors().and().
+//                    authorizeRequests()
+//                    .requestMatchers(CorsUtils:: isPreFlightRequest).permitAll()
+//                    .anyRequest()
+//                    .authenticated()
+//                    .and()
+//                    .httpBasic()
+//                    .realmName("Biometrix");
+//
+//            http.csrf().disable();
+
+//            CorsConfiguration corsConfiguration = new CorsConfiguration();
+//            corsConfiguration.setAllowedHeaders(Arrays.asList(
+//                    "Authorization",
+//                    "Cache-Control",
+//                    "Content-Type",
+//                    "X-API-KEY",
+//                    "x-api-key",
+//                    "Access-Control-Allow-Origin"));
+//            corsConfiguration.setAllowedOrigins(Arrays.asList("*"));
+//            corsConfiguration.setAllowedMethods(Arrays.asList(
+//                    "GET", "POST", "PUT", "DELETE", "PUT", "OPTIONS", "PATCH", "DELETE"));
+//            corsConfiguration.setAllowCredentials(true);
+//            corsConfiguration.setExposedHeaders(Arrays.asList("Authorization", "Access-Control-Allow-Origin"));
+//
+//            // You can customize the following part based on your project, it's only a sample
+//            http.authorizeRequests().antMatchers("/**").permitAll()
+//                    .anyRequest().authenticated()
+//                    .and()
+//                    .csrf().disable()
+//                    .cors().configurationSource(request -> corsConfiguration);
+//        }
+
+//    @Bean
+//    CorsConfigurationSource corsConfigurationSource() {
+//        CorsConfiguration configuration = new CorsConfiguration();
+//        configuration.setAllowCredentials(true);
+//        configuration.setAllowedHeaders(Arrays.asList("Authorization", "X-API-KEY"));
+//        configuration.setAllowedOrigins(Arrays.asList("*"));
+//        configuration.setAllowedMethods(Arrays.asList("*"));
+//        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
+//        source.registerCorsConfiguration("/**", configuration);
+//        return source;
+//    }
+
+
+    /*@Bean
+    public CorsConfigurationSource corsConfigurationSource() {
+        CorsConfiguration configuration = new CorsConfiguration();
+        // TODO ulozit allowed origins niekde do configu
+        configuration.setAllowedOrigins(Arrays.asList(
+                "http://0.0.0.0:4200",
+                "http://0.0.0.0:6060",
+                "http://kovo.space:4200",
+                "http://kovo.space:6060",
+                "http://localhost:4200",
+                "http://localhost:6060",
+                "http://paster.cloud",
+                "http://www.paster.cloud",
+                "https://paster.cloud",
+                "https://www.paster.cloud"
+        ));
+        configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"));
+        configuration.setAllowedHeaders(Arrays.asList("authorization", "content-type", "x-auth-token"));
+        configuration.setExposedHeaders(Arrays.asList("x-auth-token"));
+        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
+        source.registerCorsConfiguration("/**", configuration);
+        return source;
+    }*/
+
+}
Index: src/main/java/com/kovospace/paster/base/configurations/securityConfig/BaseSecurityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.kovospace.paster.base.configurations.securityConfig;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.CorsConfigurationSource;\nimport org.springframework.web.cors.UrlBasedCorsConfigurationSource;\n\nimport java.util.Arrays;\n\npublic abstract class BaseSecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Bean\n    public CorsConfigurationSource corsConfigurationSource() {\n        CorsConfiguration configuration = new CorsConfiguration();\n        // TODO ulozit allowed origins niekde do configu\n        configuration.setAllowedOrigins(Arrays.asList(\n                \"http://0.0.0.0:4200\",\n                \"http://0.0.0.0:6060\",\n                \"http://kovo.space:4200\",\n                \"http://kovo.space:6060\",\n                \"http://localhost:4200\",\n                \"http://localhost:6060\",\n                \"http://paster.cloud\",\n                \"http://www.paster.cloud\",\n                \"https://paster.cloud\",\n                \"https://www.paster.cloud\"\n        ));\n        configuration.setAllowedMethods(Arrays.asList(\"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\", \"OPTIONS\"));\n        configuration.setAllowedHeaders(Arrays.asList(\"authorization\", \"content-type\", \"x-auth-token\"));\n        configuration.setExposedHeaders(Arrays.asList(\"x-auth-token\"));\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n        source.registerCorsConfiguration(\"/**\", configuration);\n        return source;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/kovospace/paster/base/configurations/securityConfig/BaseSecurityConfig.java b/src/main/java/com/kovospace/paster/base/configurations/securityConfig/BaseSecurityConfig.java
--- a/src/main/java/com/kovospace/paster/base/configurations/securityConfig/BaseSecurityConfig.java	(revision 39e7413015175658fffeffd335f30c8152fcdc08)
+++ b/src/main/java/com/kovospace/paster/base/configurations/securityConfig/BaseSecurityConfig.java	(date 1653734808880)
@@ -1,36 +1,7 @@
 package com.kovospace.paster.base.configurations.securityConfig;
 
-import org.springframework.context.annotation.Bean;
 import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
-import org.springframework.web.cors.CorsConfiguration;
-import org.springframework.web.cors.CorsConfigurationSource;
-import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
-
-import java.util.Arrays;
 
 public abstract class BaseSecurityConfig extends WebSecurityConfigurerAdapter {
 
-    @Bean
-    public CorsConfigurationSource corsConfigurationSource() {
-        CorsConfiguration configuration = new CorsConfiguration();
-        // TODO ulozit allowed origins niekde do configu
-        configuration.setAllowedOrigins(Arrays.asList(
-                "http://0.0.0.0:4200",
-                "http://0.0.0.0:6060",
-                "http://kovo.space:4200",
-                "http://kovo.space:6060",
-                "http://localhost:4200",
-                "http://localhost:6060",
-                "http://paster.cloud",
-                "http://www.paster.cloud",
-                "https://paster.cloud",
-                "https://www.paster.cloud"
-        ));
-        configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"));
-        configuration.setAllowedHeaders(Arrays.asList("authorization", "content-type", "x-auth-token"));
-        configuration.setExposedHeaders(Arrays.asList("x-auth-token"));
-        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
-        source.registerCorsConfiguration("/**", configuration);
-        return source;
-    }
 }
Index: src/main/java/com/kovospace/paster/PasterApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.kovospace.paster;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class PasterApplication {\n\n  public static void main(String[] args) {\n    SpringApplication.run(PasterApplication.class, args);\n  }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/kovospace/paster/PasterApplication.java b/src/main/java/com/kovospace/paster/PasterApplication.java
--- a/src/main/java/com/kovospace/paster/PasterApplication.java	(revision 39e7413015175658fffeffd335f30c8152fcdc08)
+++ b/src/main/java/com/kovospace/paster/PasterApplication.java	(date 1653712174720)
@@ -2,6 +2,10 @@
 
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.SpringBootApplication;
+import org.springframework.context.annotation.Bean;
+import org.springframework.web.servlet.config.annotation.CorsRegistry;
+import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
+import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
 
 @SpringBootApplication
 public class PasterApplication {
Index: update_script.sh
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#!/bin/bash\n\ncd /var/www/paster-backend/paster-backend\n\ngit pull\n\n./gradlew build\n\ncd build/libs\n\nsystemctl restart paster-backend\n\nexit\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/update_script.sh b/update_script.sh
--- a/update_script.sh	(revision 39e7413015175658fffeffd335f30c8152fcdc08)
+++ b/update_script.sh	(date 1653702594711)
@@ -1,5 +1,7 @@
 #!/bin/bash
 
+systemctl stop paster-backend
+
 cd /var/www/paster-backend/paster-backend
 
 git pull
@@ -8,6 +10,6 @@
 
 cd build/libs
 
-systemctl restart paster-backend
+systemctl start paster-backend
 
 exit
Index: src/test/java/com/kovospace/paster/item/integration/ItemControllerAddTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.kovospace.paster.item.integration;\n\nimport com.kovospace.paster.base.services.JwtService;\nimport com.kovospace.paster.item.dtos.ItemRequestDTO;\nimport com.kovospace.paster.item.repositories.ItemRepository;\nimport com.kovospace.paster.user.models.User;\nimport com.kovospace.paster.user.repositories.UserRepository;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Order;\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.http.MediaType;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.test.annotation.DirtiesContext;\nimport org.springframework.transaction.annotation.Transactional;\n\nimport static java.util.stream.Collectors.joining;\nimport static java.util.stream.Stream.generate;\nimport static org.hamcrest.Matchers.hasItem;\nimport static org.hamcrest.Matchers.is;\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;\nimport static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n\n//TODO testy na problemy s jwtTokenom\npublic class ItemControllerAddTest extends ItemControllerTest {\n\n  @Transactional\n  @BeforeEach\n  public void init() {\n    userRepository.deleteAll();\n    user = new User();\n    user.setName(\"Anatoli Datlov\");\n    user.setEmail(\"datlov@chnpp.cccp\");\n    user.setPasword(bCryptPasswordEncoder.encode(\"AZ-5\"));\n    userRepository.save(user);\n    user.setJwtToken(jwtService.generate(user));\n    this.token = jwtService.getPrefix() + \" \" + user.getJwtToken();\n  }\n\n  @AfterEach\n  public void destruct() {\n    itemRepository.deleteAll();\n  }\n\n  @Test\n  @Order(1)\n  public void unauthorizedRequestNotOK() throws Exception {\n    postRequest()\n            .run()\n            .andExpect(status().is(401))\n            .andExpect(jsonPath(\"$.status\", is(\"error\")))\n            .andExpect(jsonPath(\"$.message\", is(\"Missing Authentication header.\")));\n  }\n\n  @Test\n  @Order(2)\n  public void requestBodyEmpty() throws Exception {\n    postRequest()\n            .withJwtToken(this.token)\n            .run()\n            .andExpect(status().is(400))\n            .andExpect(jsonPath(\"$.message\", is(\"Request body malformed or missing.\")));\n  }\n\n  @Test\n  @Order(3)\n  public void requestBodyMalformed() throws Exception {\n    postRequest()\n            .withJwtToken(this.token)\n            .withMediaType(MediaType.APPLICATION_JSON)\n            .withMediaContent(\"{kjhmbn}\")\n            .run()\n            .andExpect(status().is(400))\n            .andExpect(jsonPath(\"$.message\", is(\"Request body malformed or missing.\")));\n  }\n\n  @Test\n  @Order(4)\n  public void requestBodyWrongMediaType() throws Exception {\n    postRequest()\n            .withJwtToken(this.token)\n            .withMediaContent(\"{\\\"text\\\":\\\"bla bla bla\\\"}\")\n            .run()\n            .andExpect(status().is(415));\n            //.andExpect(jsonPath(\"$.message\", is(\"Wrong request media type.\")));\n  }\n\n  @Test\n  @Order(5)\n  public void requestJsonEmpty() throws Exception {\n    postRequest()\n            .withJwtToken(this.token)\n            .withMediaType(MediaType.APPLICATION_JSON)\n            .withMediaContent(\"{}\")\n            .run()\n            .andExpect(status().is(400))\n            .andExpect(jsonPath(\"$.messages.length()\", is(1)))\n            .andExpect(jsonPath(\"$.messages.text.*\", hasItem(\"Item not presented.\")));\n  }\n\n  @Test\n  @Order(6)\n  public void contentNull() throws Exception {\n    ItemRequestDTO item = new ItemRequestDTO();\n\n    postRequest()\n            .withJwtToken(this.token)\n            .withMediaType(MediaType.APPLICATION_JSON)\n            .withMediaContent(objectMapper.writeValueAsBytes(item))\n            .run()\n            .andExpect(status().is(400))\n            .andExpect(jsonPath(\"$.messages.length()\", is(1)))\n            .andExpect(jsonPath(\"$.messages.text.*\", hasItem(\"Item not presented.\")));\n  }\n\n  @Test\n  @Order(7)\n  public void contentIsEmpty() throws Exception {\n    ItemRequestDTO item = new ItemRequestDTO();\n    item.setText(\"\");\n\n    postRequest()\n            .withJwtToken(this.token)\n            .withMediaType(MediaType.APPLICATION_JSON)\n            .withMediaContent(objectMapper.writeValueAsBytes(item))\n            .run()\n            .andExpect(status().is(400))\n            .andExpect(jsonPath(\"$.messages.length()\", is(1)))\n            .andExpect(jsonPath(\"$.messages.text.*\", hasItem(\"Nothing pasted.\")));\n  }\n\n  @Test\n  @Order(8)\n  public void maximumSizeReached() throws Exception {\n    String tst = generate(() -> \"a\").limit(maxTextLength + 1).collect(joining());\n    ItemRequestDTO item = new ItemRequestDTO();\n    item.setText(tst);\n\n    postRequest()\n            .withJwtToken(this.token)\n            .withMediaType(MediaType.APPLICATION_JSON)\n            .withMediaContent(objectMapper.writeValueAsBytes(item))\n            .run()\n            .andExpect(status().is(400))\n            .andExpect(jsonPath(\"$.messages.length()\", is(1)))\n            .andExpect(jsonPath(\"$.messages.text.*\", hasItem(\"Maximum allowed size exceeded.\")));\n  }\n\n  @Test\n  @Order(9)\n  @DirtiesContext\n  public void itemSavedShort() throws Exception {\n    ItemRequestDTO item = new ItemRequestDTO();\n    item.setText(\"test string\");\n\n    itemPostTest(item, 201);\n  }\n\n  @Test\n  @Order(10)\n  @DirtiesContext\n  public void itemSaved() throws Exception {\n    String tst = generate(() -> \"a\").limit(maxTextLength - 1).collect(joining());\n    ItemRequestDTO item = new ItemRequestDTO();\n    item.setText(tst);\n\n    itemPostTest(item, 201);\n    itemDbSaveTest();\n    //TODO unable to run - freezes\n    /*itemGetTests()\n            .andExpect(jsonPath(\"$.text\", is(\"test\")));*/\n  }\n\n  @Test\n  @Order(11)\n  @DirtiesContext\n  public void platformNotSet() throws Exception {\n    ItemRequestDTO item = new ItemRequestDTO();\n    item.setText(\"test\");\n\n    itemPostTest(item, 201);\n\n    itemGetTests()\n            .andExpect(jsonPath(\"$.text\", is(\"test\")))\n            .andExpect(jsonPath(\"$.platform\", is(\"UNKNOWN\")));\n    ;\n  }\n\n  @Test\n  @Order(12)\n  @DirtiesContext\n  public void platformWrong() throws Exception {\n    ItemRequestDTO item = new ItemRequestDTO();\n    item.setText(\"test\");\n    item.setPlatform(\"kokotina\");\n\n    postRequest()\n            .withJwtToken(this.token)\n            .withMediaType(MediaType.APPLICATION_JSON)\n            .withMediaContent(objectMapper.writeValueAsBytes(item))\n            .run()\n            .andExpect(status().is(400))\n            .andExpect(jsonPath(\"$.messages.length()\", is(1)))\n            .andExpect(jsonPath(\"$.messages.platform.*\", hasItem(\"Wrong platform type passed.\")));\n\n    assertNotNull(userRepository.findFirstByName(user.getName()));\n    assertNotNull(itemRepository.findAllByUserOrderByCreatedAtDesc(user));\n    assertTrue(itemRepository.findAllByUserOrderByCreatedAtDesc(user).isEmpty());\n  }\n\n  @Test\n  @Order(13)\n  @DirtiesContext\n  public void platformOK() throws Exception {\n    ItemRequestDTO item = new ItemRequestDTO();\n    item.setText(\"test\");\n    item.setPlatform(\"webapp\");\n\n    itemPostTest(item, 201);\n    itemDbSaveTest();\n    itemGetTests()\n            .andExpect(jsonPath(\"$.text\", is(\"test\")))\n            .andExpect(jsonPath(\"$.platform\", is(\"WEBAPP\")));\n  }\n\n  //TODO preco kod 403\n  @Test\n  @Order(14)\n  public void apiKeyNotIncluded() throws Exception {\n    postRequest()\n            .withApiKey(null)\n            .run()\n            .andExpect(status().is(403));\n  }\n\n  @Test\n  @Order(15)\n  public void apiKeyEmpty() throws Exception {\n    postRequest()\n            .withApiKey(\"\")\n            .run()\n            .andExpect(status().is(401));\n  }\n\n  @Test\n  @Order(16)\n  public void apiKeyWrong() throws Exception {\n    postRequest()\n            .withApiKey(\"wrongApiKey\")\n            .run()\n            .andExpect(status().is(401));\n  }\n\n  @Test\n  @Order(17)\n  @DirtiesContext\n  public void deviceNameOK() throws Exception {\n    ItemRequestDTO item = new ItemRequestDTO();\n    item.setText(\"test\");\n    item.setDeviceName(\"dummyDevice\");\n\n    itemPostTest(item, 201);\n    itemDbSaveTest();\n    itemGetTests()\n            .andExpect(jsonPath(\"$.text\", is(\"test\")))\n            .andExpect(jsonPath(\"$.deviceName\", is(\"dummyDevice\")));\n  }\n\n  @Test\n  @Order(18)\n  @DirtiesContext\n  public void deviceNameSetEmpty() throws Exception {\n    ItemRequestDTO item = new ItemRequestDTO();\n    item.setText(\"test\");\n    item.setDeviceName(\"\");\n\n    itemPostTest(item, 201);\n    itemDbSaveTest();\n    itemGetTests()\n            .andExpect(jsonPath(\"$.text\", is(\"test\")))\n            .andExpect(jsonPath(\"$.deviceName\", is(\"\")));\n  }\n\n  @Test\n  @Order(19)\n  @DirtiesContext\n  public void deviceNameSetNull() throws Exception {\n    ItemRequestDTO item = new ItemRequestDTO();\n    item.setText(\"test\");\n    item.setDeviceName(\"\");\n\n    itemPostTest(item, 201);\n    itemDbSaveTest();\n    itemGetTests()\n            .andExpect(jsonPath(\"$.text\", is(\"test\")))\n            .andExpect(jsonPath(\"$.deviceName\", is(\"\")));\n  }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/kovospace/paster/item/integration/ItemControllerAddTest.java b/src/test/java/com/kovospace/paster/item/integration/ItemControllerAddTest.java
--- a/src/test/java/com/kovospace/paster/item/integration/ItemControllerAddTest.java	(revision 39e7413015175658fffeffd335f30c8152fcdc08)
+++ b/src/test/java/com/kovospace/paster/item/integration/ItemControllerAddTest.java	(date 1653714451386)
@@ -227,14 +227,13 @@
             .andExpect(jsonPath("$.platform", is("WEBAPP")));
   }
 
-  //TODO preco kod 403
   @Test
   @Order(14)
   public void apiKeyNotIncluded() throws Exception {
     postRequest()
             .withApiKey(null)
             .run()
-            .andExpect(status().is(403));
+            .andExpect(status().is(401));
   }
 
   @Test
