openapi: 3.0.3
info:
  title: Api Documentation
  description: Api Documentation
  termsOfService: urn:tos
  contact:
    name: ""
    url: ""
    email: ""
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
  version: "1.0"
servers: []
tags:
- name: info-controller
  description: Info Controller
- name: item-controller
  description: Item Controller
- name: user-controller
  description: User Controller
paths:
  /api/info/checkPlatform:
    post:
      tags:
      - info-controller
      summary: Check Platform
      description: Given platform is listed and supported
      operationId: checkPlatformUsingPOST
      parameters:
      - name: platformEnum
        in: query
        description: The platform enum
        required: true
        style: form
        schema:
          type: string
          format: ""
          enum:
          - DESKTOP_APPLE
          - DESKTOP_LINUX
          - DESKTOP_WINDOWS
          - MOBILE_ANDROID
          - MOBILE_APPLE
          - UNKNOWN
          - WEBAPP
        examples: {}
      responses:
        "200":
          description: Platform checked successfully
          headers: {}
          content:
            '*/*':
              schema:
                type: string
                format: ""
              examples: {}
              encoding: {}
        "201":
          description: Created
          headers: {}
          content: {}
        "401":
          description: Unauthorized
          headers: {}
          content: {}
        "403":
          description: Forbidden
          headers: {}
          content: {}
        "404":
          description: Given platform does not exists
          headers: {}
          content: {}
      security: []
  /api/v1/board/item:
    post:
      tags:
      - item-controller
      summary: add
      operationId: addUsingPOST
      parameters:
      - name: Authorization
        in: header
        description: Authorization
        required: true
        schema:
          type: string
          format: ""
        examples: {}
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemRequestDTO'
            encoding: {}
      responses:
        "200":
          description: OK
          headers: {}
          content: {}
        "201":
          description: Created
          headers: {}
          content: {}
        "401":
          description: Unauthorized
          headers: {}
          content: {}
        "403":
          description: Forbidden
          headers: {}
          content: {}
        "404":
          description: Not Found
          headers: {}
          content: {}
      security: []
  /api/v1/board/item/{id}:
    get:
      tags:
      - item-controller
      summary: get
      operationId: getUsingGET
      parameters:
      - name: Authorization
        in: header
        description: Authorization
        required: true
        schema:
          type: string
          format: ""
        examples: {}
      - name: id
        in: path
        description: id
        required: true
        style: simple
        schema:
          type: integer
          format: int64
        examples: {}
      responses:
        "200":
          description: OK
          headers: {}
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ItemResponseDTO'
              examples: {}
              encoding: {}
        "401":
          description: Unauthorized
          headers: {}
          content: {}
        "403":
          description: Forbidden
          headers: {}
          content: {}
        "404":
          description: Not Found
          headers: {}
          content: {}
      security: []
    put:
      tags:
      - item-controller
      summary: update
      operationId: updateUsingPUT
      parameters:
      - name: Authorization
        in: header
        description: Authorization
        required: true
        schema:
          type: string
          format: ""
        examples: {}
      - name: id
        in: path
        description: id
        required: true
        style: simple
        schema:
          type: integer
          format: int64
        examples: {}
      responses:
        "200":
          description: OK
          headers: {}
          content: {}
        "201":
          description: Created
          headers: {}
          content: {}
        "401":
          description: Unauthorized
          headers: {}
          content: {}
        "403":
          description: Forbidden
          headers: {}
          content: {}
        "404":
          description: Not Found
          headers: {}
          content: {}
      security: []
    delete:
      tags:
      - item-controller
      summary: delete
      operationId: deleteUsingDELETE
      parameters:
      - name: Authorization
        in: header
        description: Authorization
        required: true
        schema:
          type: string
          format: ""
        examples: {}
      - name: id
        in: path
        description: id
        required: true
        style: simple
        schema:
          type: integer
          format: int64
        examples: {}
      responses:
        "200":
          description: OK
          headers: {}
          content: {}
        "204":
          description: No Content
          headers: {}
          content: {}
        "401":
          description: Unauthorized
          headers: {}
          content: {}
        "403":
          description: Forbidden
          headers: {}
          content: {}
      security: []
  /api/v1/board/items:
    get:
      tags:
      - item-controller
      summary: getAll
      operationId: getAllUsingGET
      parameters:
      - name: Authorization
        in: header
        description: Authorization
        required: true
        schema:
          type: string
          format: ""
        examples: {}
      responses:
        "200":
          description: OK
          headers: {}
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ItemsResponseDTO'
              examples: {}
              encoding: {}
        "401":
          description: Unauthorized
          headers: {}
          content: {}
        "403":
          description: Forbidden
          headers: {}
          content: {}
        "404":
          description: Not Found
          headers: {}
          content: {}
      security: []
  /api/v2/board/file:
    put:
      tags:
      - item-controller
      summary: uploadChunk
      operationId: uploadChunkUsingPUT
      parameters:
      - name: Authorization
        in: header
        description: Authorization
        required: true
        schema:
          type: string
          format: ""
        examples: {}
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileItemUploadChunkRequestDTO'
            encoding: {}
      responses:
        "200":
          description: OK
          headers: {}
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FileItemUploadResponseDTO'
              examples: {}
              encoding: {}
        "201":
          description: Created
          headers: {}
          content: {}
        "401":
          description: Unauthorized
          headers: {}
          content: {}
        "403":
          description: Forbidden
          headers: {}
          content: {}
        "404":
          description: Not Found
          headers: {}
          content: {}
      security: []
    post:
      tags:
      - item-controller
      summary: addFile
      operationId: addFileUsingPOST
      parameters:
      - name: Authorization
        in: header
        description: Authorization
        required: true
        schema:
          type: string
          format: ""
        examples: {}
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileItemInitiateRequestDTO'
            encoding: {}
      responses:
        "200":
          description: OK
          headers: {}
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FileItemUploadResponseDTO'
              examples: {}
              encoding: {}
        "201":
          description: Created
          headers: {}
          content: {}
        "401":
          description: Unauthorized
          headers: {}
          content: {}
        "403":
          description: Forbidden
          headers: {}
          content: {}
        "404":
          description: Not Found
          headers: {}
          content: {}
      security: []
  /api/v2/board/file/{id}:
    get:
      tags:
      - item-controller
      summary: getFile
      operationId: getFileUsingGET
      parameters:
      - name: Authorization
        in: header
        description: Authorization
        required: true
        schema:
          type: string
          format: ""
        examples: {}
      - name: id
        in: path
        description: id
        required: true
        style: simple
        schema:
          type: integer
          format: int64
        examples: {}
      responses:
        "200":
          description: OK
          headers: {}
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/FileResponseDTO'
              examples: {}
              encoding: {}
        "401":
          description: Unauthorized
          headers: {}
          content: {}
        "403":
          description: Forbidden
          headers: {}
          content: {}
        "404":
          description: Not Found
          headers: {}
          content: {}
      security: []
  /api/v2/board/item:
    post:
      tags:
      - item-controller
      summary: add
      operationId: addUsingPOST_1
      parameters:
      - name: Authorization
        in: header
        description: Authorization
        required: true
        schema:
          type: string
          format: ""
        examples: {}
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TextItemRequestDTO'
            encoding: {}
      responses:
        "200":
          description: OK
          headers: {}
          content: {}
        "201":
          description: Created
          headers: {}
          content: {}
        "401":
          description: Unauthorized
          headers: {}
          content: {}
        "403":
          description: Forbidden
          headers: {}
          content: {}
        "404":
          description: Not Found
          headers: {}
          content: {}
      security: []
  /api/v2/board/item/{id}:
    get:
      tags:
      - item-controller
      summary: get
      operationId: getUsingGET_1
      parameters:
      - name: Authorization
        in: header
        description: Authorization
        required: true
        schema:
          type: string
          format: ""
        examples: {}
      - name: id
        in: path
        description: id
        required: true
        style: simple
        schema:
          type: integer
          format: int64
        examples: {}
      responses:
        "200":
          description: OK
          headers: {}
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ItemResponseDTO'
              examples: {}
              encoding: {}
        "401":
          description: Unauthorized
          headers: {}
          content: {}
        "403":
          description: Forbidden
          headers: {}
          content: {}
        "404":
          description: Not Found
          headers: {}
          content: {}
      security: []
    put:
      tags:
      - item-controller
      summary: update
      operationId: updateUsingPUT_1
      parameters:
      - name: Authorization
        in: header
        description: Authorization
        required: true
        schema:
          type: string
          format: ""
        examples: {}
      - name: id
        in: path
        description: id
        required: true
        style: simple
        schema:
          type: integer
          format: int64
        examples: {}
      responses:
        "200":
          description: OK
          headers: {}
          content: {}
        "201":
          description: Created
          headers: {}
          content: {}
        "401":
          description: Unauthorized
          headers: {}
          content: {}
        "403":
          description: Forbidden
          headers: {}
          content: {}
        "404":
          description: Not Found
          headers: {}
          content: {}
      security: []
    delete:
      tags:
      - item-controller
      summary: delete
      operationId: deleteUsingDELETE_1
      parameters:
      - name: Authorization
        in: header
        description: Authorization
        required: true
        schema:
          type: string
          format: ""
        examples: {}
      - name: id
        in: path
        description: id
        required: true
        style: simple
        schema:
          type: integer
          format: int64
        examples: {}
      responses:
        "200":
          description: OK
          headers: {}
          content: {}
        "204":
          description: No Content
          headers: {}
          content: {}
        "401":
          description: Unauthorized
          headers: {}
          content: {}
        "403":
          description: Forbidden
          headers: {}
          content: {}
      security: []
  /api/v2/board/items:
    get:
      tags:
      - item-controller
      summary: getAll
      operationId: getAllUsingGET_1
      parameters:
      - name: Authorization
        in: header
        description: Authorization
        required: true
        schema:
          type: string
          format: ""
        examples: {}
      responses:
        "200":
          description: OK
          headers: {}
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ItemsResponseDTO'
              examples: {}
              encoding: {}
        "401":
          description: Unauthorized
          headers: {}
          content: {}
        "403":
          description: Forbidden
          headers: {}
          content: {}
        "404":
          description: Not Found
          headers: {}
          content: {}
      security: []
  /api/v1/user/login:
    post:
      tags:
      - user-controller
      summary: Login user
      description: Logs in a user with the provided credentials.
      operationId: loginUsingPOST
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequestDTO'
            encoding: {}
      responses:
        "200":
          description: User logged in successfully
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserLoginResponseDTO'
              examples: {}
              encoding: {}
            '*/*':
              schema:
                $ref: '#/components/schemas/UserLoginResponseDTO'
              examples: {}
              encoding: {}
        "201":
          description: Created
          headers: {}
          content: {}
        "400":
          description: Bad request
          headers: {}
          content: {}
        "401":
          description: Unauthorized
          headers: {}
          content: {}
        "403":
          description: Forbidden
          headers: {}
          content: {}
        "404":
          description: Not Found
          headers: {}
          content: {}
      security: []
    delete:
      tags:
      - user-controller
      summary: remove
      operationId: removeUsingDELETE
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRemoveRequestDTO'
            encoding: {}
      responses:
        "200":
          description: OK
          headers: {}
          content:
            '*/*':
              schema:
                type: object
                format: ""
              examples: {}
              encoding: {}
        "204":
          description: No Content
          headers: {}
          content: {}
        "401":
          description: Unauthorized
          headers: {}
          content: {}
        "403":
          description: Forbidden
          headers: {}
          content: {}
      security: []
    patch:
      tags:
      - user-controller
      summary: passChange
      operationId: passChangeUsingPATCH
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPassChangeRequestDTO'
            encoding: {}
      responses:
        "200":
          description: OK
          headers: {}
          content:
            '*/*':
              schema:
                type: object
                format: ""
              examples: {}
              encoding: {}
        "204":
          description: No Content
          headers: {}
          content: {}
        "401":
          description: Unauthorized
          headers: {}
          content: {}
        "403":
          description: Forbidden
          headers: {}
          content: {}
      security: []
  /api/v1/user/register:
    post:
      tags:
      - user-controller
      summary: register
      operationId: registerUsingPOST
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequestDTO'
            encoding: {}
      responses:
        "200":
          description: OK
          headers: {}
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/UserLoginResponseDTO'
              examples: {}
              encoding: {}
        "201":
          description: Created
          headers: {}
          content: {}
        "401":
          description: Unauthorized
          headers: {}
          content: {}
        "403":
          description: Forbidden
          headers: {}
          content: {}
        "404":
          description: Not Found
          headers: {}
          content: {}
      security: []
  /api/v1/user/user:
    patch:
      tags:
      - user-controller
      summary: remove
      operationId: removeUsingPATCH
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfoChangeRequestDTO'
            encoding: {}
      responses:
        "200":
          description: OK
          headers: {}
          content:
            '*/*':
              schema:
                type: object
                format: ""
              examples: {}
              encoding: {}
        "204":
          description: No Content
          headers: {}
          content: {}
        "401":
          description: Unauthorized
          headers: {}
          content: {}
        "403":
          description: Forbidden
          headers: {}
          content: {}
      security: []
components:
  schemas:
    FileItemInitiateRequestDTO:
      title: FileItemInitiateRequestDTO
      required:
      - mimeType
      - originalFileName
      type: object
      properties:
        chunkSize:
          type: integer
          format: int64
        chunksCount:
          type: integer
          format: int64
        deviceName:
          type: string
          format: ""
        fileId:
          type: integer
          format: int64
        itemId:
          type: integer
          format: int64
        mimeType:
          type: string
          format: ""
        originalFileName:
          type: string
          format: ""
        platform:
          type: string
          format: ""
    FileItemUploadChunkRequestDTO:
      title: FileItemUploadChunkRequestDTO
      required:
      - chunkNumber
      - fileContent
      - fileId
      - itemId
      - mimeType
      - originalFileName
      type: object
      properties:
        chunkNumber:
          type: integer
          format: int64
        deviceName:
          type: string
          format: ""
        fileContent:
          type: string
          format: byte
        fileId:
          type: integer
          format: int64
        itemId:
          type: integer
          format: int64
        mimeType:
          type: string
          format: ""
        originalFileName:
          type: string
          format: ""
        platform:
          type: string
          format: ""
    FileItemUploadResponseDTO:
      title: FileItemUploadResponseDTO
      type: object
      properties:
        chunkNumber:
          type: integer
          format: int64
        chunkSize:
          type: integer
          format: int64
        chunksCount:
          type: integer
          format: int64
        extension:
          type: string
          format: ""
        fileId:
          type: integer
          format: int64
        fileName:
          type: string
          format: ""
        filePath:
          type: string
          format: ""
        itemId:
          type: integer
          format: int64
        mimeType:
          type: string
          format: ""
        originalFileName:
          type: string
          format: ""
        status:
          type: string
          format: ""
    FileResponseDTO:
      title: FileResponseDTO
      type: object
      properties:
        data:
          type: string
          format: byte
        filename:
          type: string
          format: ""
        originalFilename:
          type: string
          format: ""
    ItemRequestDTO:
      title: ItemRequestDTO
      required:
      - text
      type: object
      properties:
        deviceName:
          type: string
          format: ""
        platform:
          type: string
          format: ""
        text:
          maxLength: 4194304
          minLength: 1
          type: string
          format: ""
    ItemResponseDTO:
      title: ItemResponseDTO
      type: object
      properties:
        data:
          type: string
          format: ""
        dataPreview:
          type: string
          format: ""
        deviceName:
          type: string
          format: ""
        file:
          type: boolean
          format: ""
        id:
          type: integer
          format: int64
        platform:
          type: string
          format: ""
          enum:
          - DESKTOP_APPLE
          - DESKTOP_LINUX
          - DESKTOP_WINDOWS
          - MOBILE_ANDROID
          - MOBILE_APPLE
          - UNKNOWN
          - WEBAPP
        status:
          type: string
          format: ""
        timestamp:
          type: integer
          format: int64
    ItemsResponseDTO:
      title: ItemsResponseDTO
      type: object
      properties:
        items:
          type: array
          items:
            type: object
        status:
          type: string
          format: ""
    TextItemRequestDTO:
      title: TextItemRequestDTO
      required:
      - text
      type: object
      properties:
        deviceName:
          type: string
          format: ""
        platform:
          type: string
          format: ""
          enum:
          - DESKTOP_APPLE
          - DESKTOP_LINUX
          - DESKTOP_WINDOWS
          - MOBILE_ANDROID
          - MOBILE_APPLE
          - UNKNOWN
          - WEBAPP
        text:
          maxLength: 4194304
          minLength: 1
          type: string
          format: ""
    UserInfoChangeRequestDTO:
      title: UserInfoChangeRequestDTO
      type: object
      properties: {}
    UserLoginRequestDTO:
      title: UserLoginRequestDTO
      type: object
      properties:
        name:
          pattern: ^\S+$
          type: string
          description: User's username
          format: ""
          example: ""
        pass:
          type: string
          description: User's password
          format: ""
          example: ""
    UserLoginResponseDTO:
      title: UserLoginResponseDTO
      type: object
      properties:
        jwtToken:
          type: string
          description: JWT token for user authentication
          format: ""
          example: ""
        status:
          type: string
          format: ""
    UserPassChangeRequestDTO:
      title: UserPassChangeRequestDTO
      type: object
      properties: {}
    UserRegisterRequestDTO:
      title: UserRegisterRequestDTO
      required:
      - email
      - gdpr
      - name
      - pass
      - pass2
      type: object
      properties:
        email:
          pattern: "^(?=.{1,64}@)[A-Za-z0-9_-]+(\\.[A-Za-z0-9_-]+)*@[^-][A-Za-z0-9-]+(\\\
            .[A-Za-z0-9-]+)*(\\.[A-Za-z]{2,})$"
          type: string
          format: ""
        gdpr:
          type: boolean
          format: ""
        name:
          type: string
          format: ""
        pass:
          pattern: ^\S+.+\S+$
          type: string
          format: ""
        pass2:
          type: string
          format: ""
    UserRemoveRequestDTO:
      title: UserRemoveRequestDTO
      type: object
      properties: {}
  securitySchemes: {}
